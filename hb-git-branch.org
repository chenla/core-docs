#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Git Branching Model Handbook
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/chenla/docs/hb-git-branch.org
:Created:   2017-09-21T16:55@Prek Leap (11.642600N-104.919210W)
:ID:        6741c080-3c74-45a8-b5e9-7e886438e180
:VER:       559259803.065007784
:GEO:       48P-491193-1287029-15
:BXID:      proj:VSK5-3186
:Class:     docs
:Type:      work
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-docs-56B4E9.svg?style=flat-square]]
[[https://img.shields.io/badge/type-work-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]


* Introduction

Branching models are a complex and hotly debated topic.


Branching Model we will be based on:

  - [[http://www.bitsnbites.eu/a-stable-mainline-branching-model-for-git/][A stable mainline branching model for Git]] | Bits'n'Bites

Simular approaches, worth studying:

  - [[http://www.josra.org/blog/An-automated-git-branching-strategy.html][An Automated Git Branching Flow]] | Lars Kruse
  - [[https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/][A succesful Git branching model considered harmful]] | Jussi Judin

---

  - [[https://git-scm.com/book/en/v2/Git-Branching-Rebasing#The-Perils-of-Rebasing][Git - Rebasing]]
  - [[https://stackoverflow.com/questions/14023648/why-does-my-git-history-look-like-a-christmas-tree][git pull - Why does my git history look like a christmas tree?]] | Stack Overflow

Too complex:

This link shows up at the top of search results.  It's very
well done and I am sure it works for him.  But it is
complex and would likely result in a lot of work to merge
branches.  Well worth reading, but we're not going there.

  - [[http://nvie.com/posts/a-successful-git-branching-model/][A successful Git branching model]] | Vincent Driessen


As Einstein said, we want to keep things as simple as
possible, but no more.  We also use a continous integration
model, so that there will be milestone releases, but for the
most part features and fixes will be rolling out as they are
completed.  We need a workflow and a branching model that is
designed with this in mind.

We use git for both development of code and for document
production, which have slightly different workflows.

Our branching model includes command line git commands as
well as Emacs Magit commands.

** Requirements

 - clean history


** All road lead to /origin/ 

Technically there are not central repos in Git, but for
practical purposes every team needs to have a repo that
everyone syncs to.

In all projects, the central repo will be called /origin/
which will be located on our gitlab server.


** The main branch

The central repo has a single permanent main branches:

  - master

Where =origin/master= is the main branch where the source
code of =HEAD= always is considered to be =stable= code
which builds on all target platforms.


** Feature Branches

Supporting branches are used to work on new features,
ironing out problems and doing a feature freeze before
merging to master, and for =hotfix's= which are used to fix
a bug or a problem that becomes a subrelease when it is
merged with =master=.

Supporting branches come in several flavours:

  - Feature branches
  - Release branches
  - Hotfix branches

** Release branches

** Release tags



[[http://semver.org/][semantic versioning]] 


The commit that represents a specific release is tagged with
a tag named vX.Y.Z, optionally suffixed with a textual
identifier, such as -rc1, -beta or -some-customer.

Example: v1.3.1-rc2
