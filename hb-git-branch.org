#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Git Branching Model Handbook
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/chenla/docs/hb-git-branch.org
:Created:   2017-09-21T16:55@Prek Leap (11.642600N-104.919210W)
:ID:        6741c080-3c74-45a8-b5e9-7e886438e180
:VER:       559259803.065007784
:GEO:       48P-491193-1287029-15
:BXID:      proj:VSK5-3186
:Class:     docs
:Type:      work
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-docs-56B4E9.svg?style=flat-square]]
[[https://img.shields.io/badge/type-work-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]


* Introduction



  - [[http://nvie.com/posts/a-successful-git-branching-model/][A successful Git branching model]] | Vincent Driessen
  - [[https://barro.github.io/2016/02/a-succesful-git-branching-model-considered-harmful/][A succesful Git branching model considered harmful]] | Jussi Judin

Our branching model includes a workflow that can be used on the
command line as well as Emacs Magit.


** 1. All road lead to /origin/ 

Technically there are not central repos in Git, but for practical
purposes  every team needs to have a repo that everyone syncs to.

In all projects, the central repo will be called /origin/ which will
be located on our gitlab server.

All this means is that when a project is created, it should be created
as a GitLab project, and then each developer will either clone the
repo to their own computer.

If a subteam wants to work on their own subteam repo, team members
need to create remotes that each point to each others repos.  Again,
this is best done using the GitLab server.

** 2. The main branches

The central repo has two permanent main branches:

  - master
  - develop

Where =origin/master is the main branch where the source code of
=HEAD= always is considered the production code which is deployed or
released.

And =origin/develop= is the main branch where the source code =HEAD=
always is the primary or latest development code for the next
release.  This is the branch that will be tested and reviewed before
being merged with =master= and tagged with a release number.

Nothing is merged with =master= except for production releases. This
allows us to create a =git hook= or a GitLab =Web Hook= that
automatically deploys code to the production server.

** 3. Supporting Branches

Supporting branches are used to work on new features, ironing out
problems  and doing a feature freeze before merging to master, and for
=hotfix's= which are used to fix a bug or a problem that becomes a
subrelease when it is merged with =master=.

Supporting branches come in several flavours:

  - Feature branches
  - Release branches
  - Hotfix branches

There are strict rules about which branches are an originating branch
and which branch are merge targets.
