#   -*- mode: org; fill-column: 60 -*-
#+TITLE: Development Methodologies Handbook
#+STARTUP: showall
#+PROPERTY: filename
  :PROPERTIES:
  :Name: /home/deerpig/proj/chenla/docs/hb-methodologies.org
  :Created: 2017-01-31T14:37@Prek Leap (11.642600N-104.919210W)
  :ID: f26c2ae8-0bb2-43c9-85f8-24f94ad47744
  :URL:
  :END:
#+INCLUDE: ./inc/head.org
#+INCLUDE: ./inc/macros.org

{{{breadcrumbs}}}

#+HTML: <div class="outline-2" id="meta">
| *Author*  | Brad Collins <brad@chenla.org>             |
| *Date*    | {{{time(%Y-%m-%d %H:%M:%S)}}}              |
#+HTML: </div>

#+TOC: headlines 4


* Status of This Document

The latest version of this document is: src_sh[:results value]{git describe --abbrev=0 --tags}

#+HTML: <div class="notice notice-info">
*Changes since the last version*

#+HTML: <ul>

#+BEGIN_SRC sh :exports results :results value html :var TAG="v00.01.02"
  RES='git log $TAG...HEAD --pretty="<li>%s</li>\n" -- hn-methodologies.org'
  if [ -z $RES ]; then
    RES="<li>no changes</li>"
  fi
  echo $RES
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
<li>no changes</li>
#+END_EXPORT

#+HTML: </ul>
#+HTML: </div>


* Introduction

#+CAPTION [[https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Uttar_Pradesh_Apsara.jpg/160px-Uttar_Pradesh_Apsara.jpg][A 12th-century sandstone statue of an Apsara]] | Wikimedia
[[./img/method/321px-Uttar_Pradesh_Apsara.jpg]]

It is said that every time the term /Agile/ is spoken aloud,
an [[https://en.wikipedia.org/wiki/Apsara][Apsara]] sheds a tear.  Since I am the last person to wish
to diminish the mental state of any Apasara (it is hard to
be a temptress of holy men when one is sad) I will try to
keep the damage to a minimum.

Chenla & b>i do not proscribe /any/ development
methodologies.  Every project is free to concoct the
methodologies that they find work best.

However, there are a lot of a good ideas in Agile,
Scrum and Kanban which, if used judiciously, can be very
helpful to development teams.

This document is meant to cherry pick the collection of
methodologies and strategies that we will be testing in
development projects.  Some things will work, others won't.

Over time this document will detail what works for us and
why, what what didn't work for us and what to avoid.

It should be kept in mind that many Agile and Scrum
practices are based on the assumption that teams are
physically located in the same place.

Successful companies who are distributed and remote, tend to
use some Agile practices, but are not religious about it.

#+begin_quote
Scrumâ€™s roles, artifacts, events, and rules are immutable
and although implementing only parts of Scrum is possible,
the result is not Scrum. 

--- See more at: [[https://www.scrumalliance.org/why-scrum/scrum-guide#sthash.MljgvADk.dpuf][Scrum Guide]]
#+end_quote

In otherwords, you can only call it /Scrum/ once you've
drunk the Cool Aide.

Second -- we will work to adapt these into our development
workflow and toolchain, using orgmode, otium and BMF.  It
should be interesting to see how these ideas can be adapted
to /generative design/ and the concept of /scopic pace
layers/.

Many of the concepts in Agile and Scrum were inspired by the
work of Christpher Alexander.  We believe that Scrum and
Agile only address one aspect of what Alexander was trying
to get people to understand and implement -- by dealing with
process, but doesn't address the deeper concepts behind his
vision.  I hope that we will eventually be able to expand on
the excellent concepts in Agile and Scrum to encompass a
broader concept of project development.

*Needless to say this document is very much a work in progress!*

* Agile
* Scrum


:SEE: [[https://www.scrumalliance.org/why-scrum/scrum-guide][The Scrum Guide]] | Scrum Alliance

** Development Team

- Self Organizing
- Cross-Functional
- No titles other than /Developer/
- No sub-teams
- Accountability belongs to the team as a whole.

** Team Size

:TL;DR: 3-9 people

Longer answer:

#+begin_quote
Optimal Development Team size is small enough to remain
nimble and large enough to complete significant work within
a Sprint. Fewer than three Development Team members decrease
interaction and results in smaller productivity
gains. Smaller Development Teams may encounter skill
constraints during the Sprint, causing the Development Team
to be unable to deliver a potentially releasable
Increment. Having more than nine members requires too much
coordination. Large Development Teams generate too much
complexity for an empirical process to manage. The Product
Owner and Scrum Master roles are not included in this count
unless they are also executing the work of the Sprint
Backlog.
 
-- See more at: [[https://www.scrumalliance.org/why-scrum/scrum-guide#sthash.MljgvADk.dpuf][Scrum Guide]]
#+end_quote

This actually fits /group size patterns/ -- [ link to
magic-number patterns and topics ]

** Roles
*** Developer

Everyone is a developer in a scrum team, there are not
titles (though there are two specialized /roles/).
Different developers may have a different specialty but
there is no hierarchy within the team.

*** The Scrum Master

"The scrum master is a servant-leader for the Scrum Team" --
you can't make this shit up....

The Scrum Master is a silly name for the person responsible
for keeping the team within the scrum methodology and
workflow -- keeping the process on track.

*** The Product Owner

Is a Janian (from Janus the two-faced Roman god) Role who
acts as a go-between for stakeholders and the developers.
She is responsible for communicating wishes from on high,
down to the team who implement them, but the Product Owner
also has authority to express the goals set out by
stakeholders as she sees fit.

** Backlog
** Sprints
** Sprint Planning
** Standup Meetings

A great deal of emphasis in Agile & Scrum is placed on the
idea of /face to face meetings/.  

*** Standup Meeting Size

Important to keep number of people no larger than 6-7. even
virtually.

** Sprint Reviews
** Sprint Restrospective
** Definition of Done

* User Stories

 - Let's use orgfile templates for User Stories together
   with some CSS to create a page for user stories for each
   project.

**  Story Maps  

Storymaps help to visualize the backlog in context with how
each story fits into the broader development picture.  It
helps you see the big picture forest and where all the trees
are within the forest.

#+CAPTION: Story Maps (placeholder image)
[[./img/method/story-maps.png]]

#+CAPTION: Story Map (from Head First Agile)
[[./img/method/story-maps-2.png]]

Story maps are organzied Stories in priority order from
highest to lowest priority.

With all stories that fit within a milestone release listed
together.

Kanban (task boards), which are simular to but not the same as
storyboards.  Kanban shows the features/stories that are
being worked on in a given sprint -- whereas story maps
focus on what features/stories will be included in each
stage of development.

* Kanban


* Making Gifs

Animated Gifs are a powerful tool for use in blog posts,
tutorials, slide decks (when used sparingly) and even sprint
reviews.  This section includes everything needed to produce
animated gifs.

Animated Gifs can quickly become very large files to
paraphrase Benjiman Franklin's key to living a long life:

#+begin_verse
  Never use a video when an animated gif can be used.
  Never show a whole screen if a single window can be used.
  Never show a single window when a portion of a window can be used.
  Never show a portion of a window if a non-animated image can be used.
#+end_verse

** Process

*** Step 1

Start by recording a video file that records your screen.

There are tools that can do this for MacOS and Windows, but
since we are a Linux shop, it's best to use FFCast + FFmpeg.

[[https://github.com/lolilolicon/FFcast][FFCast]] is a wrapper for ffmpeg that captures and records
regions of screens.  FFcast can be piped into [[https://github.com/vvo/gifify][Gifify]] which
converts video into gifs.

 - [[http://unix.stackexchange.com/questions/113695/gif-screencasting-the-unix-way][video - GIF screencasting; the UNIX way]] | Unix & Linux Stack Exchange]
 - [[http://www.function.fr/creating-optimized-animated-gif-screencasts-on-osx-or-linux/][Create optimized GIF screencasts on Linux and OSX]]

*** Install FFCast, FFmpeg and Gifify

On Debian, add tje deb-multimedia.org repo

#+begin_src su :dir /sudo::
sudo echo deb http://www.deb-multimedia.org testing main non-free \
                  >>/etc/apt/sources.list
#+end_src

#+begin_src sh :dir /sudo::
sudo apt-get -y update
sudo apt-get install -y deb-multimedia-keyring
#+end_src

#+RESULTS:

#+begin_src sh :dir /sudo::
sudo apt-get install -y ffmpeg
#+end_src


#+begin_src sh
sudo apt-get install autoconf automake build-essential checkinstall git libx11-dev x11-utils
git clone --recursive https://github.com/lolilolicon/FFcast.git
cd FFcast
./bootstrap
./configure --prefix=/usr/local --enable-xrectsel
make
sudo checkinstall --pkgname ffcast --pkgversion "1:2.4.1+git$(git rev-parse --short HEAD)" --fstrans=no --default
#+end_src



* Further Reading
