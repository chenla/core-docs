#   -*- mode: org; fill-column: 60 -*-
#+TITLE: Development Methodologies Handbook
#+STARTUP: showall
#+PROPERTY: filename
  :PROPERTIES:
  :Name: /home/deerpig/proj/chenla/docs/hb-methodologies.org
  :Created: 2017-01-31T14:37@Prek Leap (11.642600N-104.919210W)
  :ID: f26c2ae8-0bb2-43c9-85f8-24f94ad47744
  :URL:
  :END:
#+INCLUDE: ./inc/head.org
#+INCLUDE: ./inc/macros.org

{{{breadcrumbs}}}

#+HTML: <div class="outline-2" id="meta">
| *Author*  | Brad Collins <brad@chenla.org>             |
| *Date*    | {{{time(%Y-%m-%d %H:%M:%S)}}}              |
#+HTML: </div>

#+TOC: headlines 4


* Introduction

#+CAPTION: [[https://upload.wikimedia.org/wikipedia/commons/thumb/0/00/Uttar_Pradesh_Apsara.jpg/160px-Uttar_Pradesh_Apsara.jpg][A 12th-century sandstone statue of an Apsara]] | Wikimedia
#+ATTR_ORG: :width 300px
[[./img/method/321px-Uttar_Pradesh_Apsara.png]]

It is said that every time the term /Agile/ is spoken aloud,
an [[https://en.wikipedia.org/wiki/Apsara][Apsara]] sheds a tear.  Since I am the last person to wish
to diminish the mental state of any Apasara (it is hard to
be a temptress of holy men when one is sad) I will try to
keep the damage to a minimum.

Chenla & b>i do not proscribe /any/ development
methodologies.  Every project is free to concoct the
methodologies that they find work best.

#+begin_quote
An excellent example of staying out of the way is that when
teams were formed at Automattic, a major question was how
they should collaborate. At first everyone stayed with P2s,
IRC, and Skype purely out of inertia, but soon teams, on
their own, tried new things. One team switched to Skype
video. Another tried Google Hangouts. There was no official
mandate or policy. Each employee, and each team, decided
which tools to try and which to keep. The tools were never
of primary importance, although Toni and Matt made clear we
had their support to buy the ones we needed and try them
out. But what always mattered most was went on in each
employee's mind. We were trusted to figure out which tools
supported our work styles individually and as teams. There
was never a mandate not to use e-mail. People simply found
that the combination of P2s and IRC solved most needs, so
that's what they used. Had a team wanted to try being
e-mail-centric, it could have.

-- [[bib:burkun:2013pants][The year without pants: WordPress.com and the future of
   work]] | Scott Berkun 2013  Ch8
#+end_quote


However, there are a lot of a good ideas in Agile,
Scrum and Kanban which, if used judiciously, can be very
helpful to development teams.

This document is meant to cherry pick the collection of
methodologies and strategies that we will be testing in
development projects.  Some things will work, others won't.

Over time this document will detail what works for us and
why, what what didn't work for us and what to avoid.

It should be kept in mind that many Agile and Scrum
practices are based on the assumption that teams are
physically located in the same place.

Successful companies who are distributed and remote, tend to
use some Agile practices, but are not religious about it.

#+begin_quote
Scrum’s roles, artifacts, events, and rules are immutable
and although implementing only parts of Scrum is possible,
the result is not Scrum. 

--- See more at: [[https://www.scrumalliance.org/why-scrum/scrum-guide#sthash.MljgvADk.dpuf][Scrum Guide]]
#+end_quote

In otherwords, you can only call it /Scrum/ once you've
drunk the Cool Aide.

Second -- we will work to adapt these into our development
workflow and toolchain, using orgmode, otium and BMF.  It
should be interesting to see how these ideas can be adapted
to /generative design/ and the concept of /scopic pace
layers/.

Many of the concepts in Agile and Scrum were inspired by the
work of Christpher Alexander.  We believe that Scrum and
Agile only address one aspect of what Alexander was trying
to get people to understand and implement -- by dealing with
process, but doesn't address the deeper concepts behind his
vision.  I hope that we will eventually be able to expand on
the excellent concepts in Agile and Scrum to encompass a
broader concept of project development.

*Needless to say this document is very much a work in progress!*



* Working Backwards

  - [[http://www.allthingsdistributed.com/2006/11/working_backwards.html][Working Backwards - All Things Distributed]] | @Amazon
 
#+begin_quote
11.3 On Writing Manuals

I guess most manuals are written after-the-fact; documenting
a program that’s already there. This is not how this manual
is written. When implementing something, I write the manual
entry for that something straight away. I then see that it’s
difficult to explain the functionality, so I write how it’s
supposed to be, and then I change the
implementation. Writing the documentation and writing the
code go hand in hand.

This, of course, means that this manual has no, or little,
flow. It documents absolutely everything in Gnus, but often
not where you’re looking for it. It is a reference manual,
and not a guide to how to get started with Gnus.

That would be a totally different book, that should be
written using the reference manual as source material. It
would look quite different.

-- [[http://gnus.org/manual/gnus_135.html#On-Writing-Manuals][Gnus Manual: 11.3 On Writing Manuals]]
#+end_quote



* The Waterfall

#+BEGIN_SRC dot :file img/waterfall.png :noweb yes :exports results
digraph h {
  <<dot-style>>

  rankdir=LR;
  splines=ortho;

  node      [fixedsize="true",height=".60",width="1.7",fillcolor="#56B4E9:0.5:#8EC9E9",gradientangle=90,fontcolor="#FFFFFF",shape=box]
  req       [label="requirements"]
  design    [label="design", pos="30,30"]
  imp       [label="implementation"]
  verify    [label="verification"]
  maint     [label="maintainence"]

 { rank=min; req;}
 { rank=sink; design;}
 { rank=min; imp; }
 { rank=sink; verify; }
 { rank=min; maint; }

  req    -> design;
  design -> imp ;
  imp    -> verify ;
  verify -> maint ;
}
#+END_SRC

#+RESULTS:
[[file:img/waterfall.png]]


** Normative References
:url: https://en.wikipedia.org/wiki/Waterfall_model






* Agile
** Agile Manifesto
 - [[http://agilemanifesto.org/][Manifesto for Agile Software Development]]
 -[[http://agilemanifesto.org/principles.html][ Principles behind the Agile Manifesto]]



** The Chicken and the Pig

#+ATTR_ORG: :width 400px
[[./img/chicken-vs-pig.png]]

image source:
  - [[https://agile-setchu.org/2015/09/29/we-are-not-chickens-nor-are-we-pigs/][We are not chickens, nor are we pigs!]] | Agile at Scale

#+begin_quote
A Pig and a Chicken are walking down the road.

The Chicken says: “Hey Pig, I was thinking we should open a restaurant!”

Pig replies: “Hm, maybe; what would we call it?”

The Chicken responds: “How about ‘ham-n-eggs’?”

The Pig thinks for a moment and says: “No, thanks. I’d be committed,
but you’d only be involved!”[4]


[4] Just to be clear: a committed “pig” cares about the project’s
success more than he cares about anything else in his professional
life. There are a lot of other things in his personal life -- like his
family, for example -- that he usually cares more about. If that’s not
the case, it’s actually a problem with the team’s mindset, and it will
interfere with sustainable pace.

 -- p97

-- /Learning Agile/ Andrew Stellman & Jennifer Greene | 2015
#+end_quote

* Scrum


:SEE: [[https://www.scrumalliance.org/why-scrum/scrum-guide][The Scrum Guide]] | Scrum Alliance

** Scrum Values

[[https://www.scrumalliance.org/why-scrum/core-scrum-values-roles][- Scrum Values | Scrum Principles]] | Scrum Alliance

 - Focus
 - Courage
 - Openness
 - Commitment
 - Respect

** Development Team

- Self Organizing
- Cross-Functional
- No titles other than /Developer/
- No sub-teams
- Accountability belongs to the team as a whole.

** Team Size

:TL;DR: 3-9 people

Longer answer:

#+begin_quote
Optimal Development Team size is small enough to remain
nimble and large enough to complete significant work within
a Sprint. Fewer than three Development Team members decrease
interaction and results in smaller productivity
gains. Smaller Development Teams may encounter skill
constraints during the Sprint, causing the Development Team
to be unable to deliver a potentially releasable
Increment. Having more than nine members requires too much
coordination. Large Development Teams generate too much
complexity for an empirical process to manage. The Product
Owner and Scrum Master roles are not included in this count
unless they are also executing the work of the Sprint
Backlog.
 
-- See more at: [[https://www.scrumalliance.org/why-scrum/scrum-guide#sthash.MljgvADk.dpuf][Scrum Guide]]
#+end_quote

This actually fits /group size patterns/ -- [ link to
magic-number patterns and topics ]

** Roles
*** Developer

Everyone is a developer in a scrum team, there are not
titles (though there are two specialized /roles/).
Different developers may have a different specialty but
there is no hierarchy within the team.

*** The Scrum Master

"The scrum master is a servant-leader for the Scrum Team" --
you can't make this shit up....

The Scrum Master is a silly name for the person responsible
for keeping the team within the scrum methodology and
workflow -- keeping the process on track.

*** The Product Owner

Is a Janian (from Janus the two-faced Roman god) Role who
acts as a go-between for stakeholders and the developers.
She is responsible for communicating wishes from on high,
down to the team who implement them, but the Product Owner
also has authority to express the goals set out by
stakeholders as she sees fit.

** Backlog
** Sprints
** Sprint Planning
** Standup Meetings

A great deal of emphasis in Agile & Scrum is placed on the
idea of /face to face meetings/.  

*** Standup Meeting Size

Important to keep number of people no larger than 6-7. even
virtually.

** Daily Scrum Meeting

#+begin_comment
*NOTE:* 2016-08-30 Obviously we have not started doing this, but I
came across the [[https://wiki.openmrs.org/display/RES/Daily+Scrum+Meeting][OpenMRS daily scrum meeting]] and thought that this is a
good fit with what I hope to do. The text in this section is using the
OpenMRS page as a starting point from which we'll slowly adapt.  I've
taken part in the weekly meetings held on IRC for One Laptop Per
Child, and they seem to work well.

*NOTE:* 2017-05-20  We are not going to be calling this
"scrum" but just daily team meetings -- I was uncomfortable
with adopting any methodology that borders on being dogma --
I know this is unfair and if this get's out I will be
roasted, but there is a lot of baggage associated with agile
and scrum though there are some /excellent/ ideas in it.
We're better off giving teams a variety of tools they can
use and organize around and leave it at that.
#+end_comment

The daily scrum meeting is a focused, 15-minute meeting for people
contributing to the core development of Chenla Saltmine to come
together and provide updates in the development process.

*** What to Report in the Scrum:

Each developer answers the following questions:

  - What did you accomplish since the last meeting?
  - What do you plan to accomplish before the next meeting?
  - What are your blockers?
  - Discussion points - Items that are not blockers but need a group
    decision on after the daily scrum is completed

*** Where to meet

The bi-weekly Chenla Forum takes place on the #chenla channel on
freenode -- the public is welcome to join this meeting where new
features and progress on the project as a whole will be discussed.

The daily team scrum meeting will be on irc.chenla.org and
mm.chenla.org in #scrum.

*** Meeting schedule

The daily scrum meeting occurs at . 

Be sure to add the correct days and times into your calendars with a
10-minute reminder prior to each meeting, so you have time to prepare
your daily report.

  | UTC Meeting Times |
  |-------------------|
  | time time time    |
 
*** Email Reminder

If you wish to recieve an email reminder of meetings -- sent about 1
hour before the meetings begin please email mailto:brad@chenla.org and
put in the subject something to the effect "remind me about scrum
meetings" or "remind me about forum meetings"

[[http://www.timeanddate.com/worldclock/converter.html][Time Zone Converter]]

*** Making the meeting efficient

 - Be available at the proper start time.
 - Write your update 10 minutes before the daily scrum meeting.
    - Set your calendar reminder alarm for 10 minutes before the daily
      scrum meeting. When the alarm occurs, write up your work and
      prepare for the meeting.
    - The update should be a summary of the following:
      - What you worked on during the previous day
      - What you are currently working on today
      - What you will continue to work on after the meeting has
        finished
      - A list of any blockers, or items that are slowing down your
        progress
  - Stay focused on the IRC channel window.
      - If the daily scrum meeting were in person, we'd all be
        standing up. That's not easy to do on IRC, so it's important
        to pay attention.
      - The biggest delay in the meeting occurs when we focus on other
        windows on our computer. Either close or minimize those
        windows before the meeting.
  - Save all problem solving for the end of the meeting.
      - Updates, output, blockers, and change-of directions will go
        out quickly during the scrum from each individual. Afterwards,
        the group will go over problem-solving for the blockers that
        need to be resolved.
  - Be honest about blockers!
      - Blockers are issues that are getting in the way of doing other
        work, or challenging issues that are taking up a lot of time.
        The main reason for the daily scrum meeting is to share
        information about blockers and resolve them together.  If you
        have worked on the same problem for more than 1 hour (even if
        you think you know the solution!) state it as a blocker.




*** Sprint Reviews
*** Sprint Restrospective
*** Definition of Done

* User Stories

 - Let's use orgfile templates for User Stories together
   with some CSS to create a page for user stories for each
   project.

**  Story Maps  

Storymaps help to visualize the backlog in context with how
each story fits into the broader development picture.  It
helps you see the big picture forest and where all the trees
are within the forest.

#+CAPTION: Story Maps (placeholder image)
#+ATTR_ORG: :width 400px
[[./img/method/story-maps.png]]

#+CAPTION: Story Map (from Head First Agile)
#+ATTR_ORG: :width 600px
[[./img/method/story-maps-2.png]]

Story maps are organzied Stories in priority order from
highest to lowest priority.

With all stories that fit within a milestone release listed
together.

Kanban (task boards), which are simular to but not the same as
storyboards.  Kanban shows the features/stories that are
being worked on in a given sprint -- whereas story maps
focus on what features/stories will be included in each
stage of development.

* Kanban
* Further Reading
