#   -*- mode: org; fill-column: 60 -*-

#+TITLE: Deployment & Integration Handbook
#+STARTUP: showall
#+TOC: headlines 4
#+PROPERTY: filename
:PROPERTIES:
:CUSTOM_ID: 
:Name:      /home/deerpig/proj/chenla/docs/hb-deployment-integration.org
:Created:   2017-09-28T11:09@Prek Leap (11.642600N-104.919210W)
:ID:        67c298a8-c167-4330-9c40-7955c9063b92
:VER:       559843861.839709316
:GEO:       48P-491193-1287029-15
:BXID:      proj:FND2-6385
:Class:     docs
:Type:      runbook
:Status:    wip
:Licence:   MIT/CC BY-SA 4.0
:END:

[[https://img.shields.io/badge/made%20by-Chenla%20Institute-999999.svg?style=flat-square]] 
[[https://img.shields.io/badge/class-docs-56B4E9.svg?style=flat-square]]
[[https://img.shields.io/badge/type-runbook-0072B2.svg?style=flat-square]]
[[https://img.shields.io/badge/status-wip-D55E00.svg?style=flat-square]]
[[https://img.shields.io/badge/licence-MIT%2FCC%20BY--SA%204.0-000000.svg?style=flat-square]]


* Introduction


** Deployment Types

*** Git post-receive hook

This works very well for personal projects only being worked
on by a single developer.

Changes are pushed to the user account on the production
server.  A git post-receive hook is triggered which builds
the site and copies it to document root.

SEE: New Web Site Handbook

Projects should treat =master= as stable, and use feature
branches named after GL# issues.

*** GitLab Webhook Push Event

This works for very small development teams (1-2 members)
where everyone can push to the production server.

Changes are pushed to =origin= which triggers a webhook that
points to a webhook receiver on the production server.  The
reciever then runs a shell script that builds and deploys
the code.

SEE: Webhook Receiver Handbook

Projects should treat =master= as stable, and use feature
branches named after GL# issues.

*** GitLab Webhook Merge Event

NOTE: This not been implemented yet.

This is for small development teams (2-10 members) where
there is a person who must approve changes before they are
deployed to the production server.

The =production= branch on GitLab is protected and a merge
request must be created to merge to the branch.  After the
merge manager reviews and tests the changes, the merge is
approved and merged with production.  This triggers a
Webhook which points to a webhook on the productin server
which then runs a script which builds and deploys the code.

Projects should treat =master= as stable, and use feature
branches named after GL# issues.  Feature branches are
merged into =master= and after testing, a merge request is
create to merge master with =production= which triggers a
webhoo that deploys the site.

*** GitLab CI, Multi-Stage Test, Build & Deployment

NOTE: This not been implemented yet.

After that we will move to a multi-stage deployment, with a
separate staging branch in the repo which will trigger a
=runner= on a staging server which will build and run tests.
Then if the tests run will trigger a merge request to merge
with the production branch which will trigger a webhook
which deploys the app or webpage to the production server.

** 1. Create a GitLab Webhook

In gitlab, in project go to project --> settings --> integrations

  - create hook for =Push= events as: http://example.com:8000

** 2. SSH Keys

 - ssh-keygen
 - if you don't use default names ie =id_rsa=, then you need to create
   a .ssh config file.

 - copy public key on GitLab in user settings --> SSH keys

 - ssh into server and test that the keys are working

    ssh -T  git@git.chenla.org

You should see something like the following:

    #+begin_example
    ╭ deerpig@chenla-www:~/repos/chenla.org-src
    ╰ $ ssh -T git@git.chenla.org
        Welcome to GitLab, Brad Collins!
    #+end_example 


** 3. Check that the server can listen on port

In OpenStack, add a security rule allowing ingress on port 8000.

I opened up 8000-8010 so that we can run multiple scripts, listening
on different ports.

** 4. Install the Webhook Receiver

We will use Shawn Sterling's Gitlab Webhook Receiver:

 - [[https://github.com/shawn-sterling/gitlab-webhook-receiver][shawn-sterling/gitlab-webhook-receiver]] | GitHub

SSH into your server and clone the repo:

#+begin_src sh
git@github.com:shawn-sterling/gitlab-webhook-receiver.git
#+end_src
