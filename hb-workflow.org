#   -*- mode: org; fill-column: 60 -*-
#+TITLE: Workflow Handbook
#+STARTUP: showall
#+PROPERTY: filename
  :PROPERTIES:
  :Name: /home/deerpig/proj/chenla/docs/hb-workflow.org
  :Created: 2017-02-07T16:53@Prek Leap (11.642600N-104.919210W)
  :ID: 7263a62c-5dde-4fac-acb0-b20ee27b19e4
  :URL:
  :END:
#+INCLUDE: ./inc/head.org
#+INCLUDE: ./inc/macros.org

{{{breadcrumbs}}}

#+HTML: <div class="outline-2" id="meta">
| *Author*  | Brad Collins <brad@chenla.org>             |
| *Date*    | {{{time(%Y-%m-%d %H:%M:%S)}}}              |
#+HTML: </div>

#+TOC: headlines 4


* Status of This Document

The latest version of this document is: src_sh[:results value]{git describe --abbrev=0 --tags}

#+HTML: <div class="notice notice-info">
*Changes since the last version*

#+HTML: <ul>

#+BEGIN_SRC sh :exports results :results value html :var TAG="v00.01.02"
  RES='git log $TAG...HEAD --pretty="<li>%s</li>\n" -- (file-name-nondirectory (buffer-file-name))'
  if [ -z $RES ]; then
    RES="<li>no changes</li>"
  fi
  echo $RES
#+END_SRC

#+RESULTS:
#+BEGIN_EXPORT html
<li>no changes</li>
#+END_EXPORT

#+HTML: </ul>
#+HTML: </div>

* Introduction

Company Handbooks

 - [[http://www.nasdaq.com/article/6-inspiring-employee-handbook-examples-cm459464][6 Inspiring Employee Handbook Examples]] | Nasdaq
 - Valve: Handbook For New Employees (pdf) | 2012
 - [[https://about.gitlab.com/handbook/][Team Handbook]] | GitLab
 - Zappos 2014 Culture Handbook

Zappos is well known for placing tremendous emphasis on
cultural fit (so much so that they offer you $3,000 to leave
after the first week).


* Management Model

#+begin_quote
Schneider had specific ideas about how to make a great
company culture, ideas that Mullenweg shared. One major
mistake Schneider had seen was how companies confused
supporting roles, like legal, human resources, and
information technology, with product creation roles like
design and development. Product creators are the true talent
of any corporation, especially one claiming to bet on
innovation. The other roles don't create products and should
be there to serve those who do. A classic betrayal of this
idea is when the IT department dictates to creatives what
equipment they can use. If one group has to be inefficient,
it should be the support group, not the creatives. If the
supporting roles, including management, dominate, the
quality of products can only suffer.

-- [[bib:burkun:2013pants][The year without pants]] | Scott Berkun 2013  Ch4
#+end_quote


#+begin_quote
The volunteer culture Automattic inherited from WordPress,
where contributors were under no obligation to participate,
defined a landscape that granted wide autonomy to
employees. Schneider and Mullenweg went to great lengths to
keep support roles, like legal, human resources, and even
IT, from infringing on the autonomy of creative roles like
engineering and design. The most striking expression of this
is that management is seen as a support role. The company
stays as flat as possible for this reason. Schneider
described his philosophy in this way:

  1. Hire great people.
  2. Set good priorities.
  3. Remove distractions.
  4. Stay out of the way.

These freedoms at Automattic reminded me that the hardest
part of work is what goes on between your ears and between
you and your coworkers. The trends and gadgets that make up
most conversations about the future of work miss the
point. Instead of vice presidents seeing the problem as a
lack of a tool or a secret method, they should realize
they're in the way more than they realize. Granting
authority is more powerful than any software, device, or
method. Instead of treating employees like children, which
many executive staffs do, Schneider and Mullenweg explicitly
desired an environment for autonomous adults—a place for
people who know best what they need to do great work.

-- [[bib:burkun:2013pants][The year without pants: WordPress.com and the future of
   work]] | Scott Berkun 2013  Ch8
#+end_quote


#+begin_quote
There was, it appeared, a mysterious rite of initiation
through which, in one way or another, almost every member of
the team passed. The term that the old hands used for this
rite — West invented the term, not the practice — was
"signing up." By signing up for the project you agreed to do
whatever was necessary for success. You agreed to forsake,
if necessary, family, hobbies, and friends — if you had any
of these left (and you might not if you had signed up too
many times before). From a manager's point of view, the
practical virtues of the ritual were manifold. Labor was no
longer coerced. Labor volunteered. When you signed up you in
effect declared, "I want to do this job and I'll give it my
heart and soul." It cut another way. The vice president of
engineering, Carl Carman, who knew the term, said much later
on: "Sometimes I worry that I pushed too hard. I tried not
to push any harder than I would on myself. That's why, by
the way, you have to go through the sign-up. To be sure
you're not conning anybody."

-- [[bib:kidder:2011soul][The Soul of a New Machine]] | Tracy Kidder
#+end_quote

#+begin_quote
That does not detract from the fact that this is still a
terrific story. I have read it several times and still quote
from it after nearly thirty years of reading from it the
first time. My favorite image is of the engineer who quit
the project to become a farmer, so that the smallest unit of
time he had to deal with was the season. My second favorite
quote (which may not be original to this book, although this
is the first time I ran into it) is that the management
style on the project was the mushroom theory. That is, `Keep
them in the dark and feed them shit'.

[[https://www.amazon.com/gp/customer-reviews/R1BO4KHY622PQP/ref=cm_cr_dp_d_rvw_ttl?ie=UTF8&ASIN=0316491977][A true journalistic classic. Buy it and Read it!]]
-- Comment on Amazon Books 
#+end_quote


* T-Shaped People

   - [[https://en.wikipedia.org/wiki/T-shaped_skills][T-shaped skills]] | Wikipedia
   - [[https://www.zionandzion.com/what-is-a-t-shaped-person/][What is a T Shaped Person?]] | Zion & Zion
   - [[https://web.archive.org/web/20110329003842/http://www.chiefexecutive.net/ME2/dirmod.asp?sid=&nm=&type=Publishing&mod=Publications::Article&mid=8F3A7027421841978F18BE895F87F791&tier=4&id=F42A23CB49174C5E9426C43CB0A0BC46][IDEO CEO Tim Brown: T-Shaped Stars]] | Chief Executive 
   - [[http://neilperkin.typepad.com/only_dead_fish/2011/10/revisiting-t-shaped-people.html][Revisiting 'T-Shaped' People]] | Only Dead Fish
   - [[https://www.fastcompany.com/52795/strategy-design][Strategy by Design]] | Fast Company
   - "The hunt is on for the Renaissance Man of computing" |
     David Guest, The Independent 1991



#+ATTR_ORG: :width 400px
[[./img/t-shaped-people.png]]

The Valve Company handbook mentions that they prefer to hire
"t-shaped" people; people who have deep knowledge and
expertise in a few subjects, and basic knowledge and
experience in many areas.

#+begin_quote
We calue "T-Shaped" people.  That is, people who are both
generalists (highly skilled at a broad set of valuable
things -- the top of the T) and also experts (among the best
in their field within a narrow discipline -- the vertical
leg of the T).

This recipe is important for success at Valve.  We often
have to pass on people who are very strong generalists
without expertise or vice versa.  An expert who is too
narrow has difficulty collaborating.  A generalist who
doesn't go deep enough in a single area end up on the
margins, not really contributing as an indvidual.

-- Valve: Handbook For New Employees pg 46 | Valve Press 2012
#+end_quote



The term was coined by IDEO's CEO Tim Brown:

#+begin_quote
T-shaped people have two kinds of characteristics, hence the
use of the letter “T” to describe them. The vertical stroke
of the “T” is a depth of skill that allows them to
contribute to the creative process. That can be from any
number of different fields: an industrial designer, an
architect, a social scientist, a business specialist or a
mechanical engineer. The horizontal stroke of the “T” is the
disposition for collaboration across disciplines. It is
composed of two things. First, empathy. It’s important
because it allows people to imagine the problem from another
perspective--to stand in somebody else’s shoes. Second, they
tend to get very enthusiastic about other people’s
disciplines, to the point that they may actually start to
practice them. Tshaped people have both depth and breadth in
their skills.

-- [[https://web.archive.org/web/20110329003842/http://www.chiefexecutive.net/ME2/dirmod.asp?sid=&nm=&type=Publishing&mod=Publications::Article&mid=8F3A7027421841978F18BE895F87F791&tier=4&id=F42A23CB49174C5E9426C43CB0A0BC46][IDEO CEO Tim Brown: T-Shaped Stars]] | Chief Executive 
#+end_quote



#+begin_quote
I-shaped person is one who is a functional expert—their
functional expertise being represented by the vertical
stroke in the letter I. A T-shaped person is more. Much
more—with the horizontal stroke of the T representing
cross-functional awareness and understanding, in addition to
the table stakes vertical stroke.

-- [[https://www.zionandzion.com/what-is-a-t-shaped-person/][What is a T Shaped Person?]] | Zion & Zion
#+end_quote

T-shaped people tend to be self-starters, and work better
within teams because they understand the larger context of
their expertise in relation to everything else.

This is related to Olson's "saturation job" because once you
have mastered a single subject you have the skills to
quickly gain proficiency in many other areas.  That doesn't
mean it will be easy, there are no short cuts, mastering
anything is a long process.  But once you have mastered one
thing you know a few things.  First, you know you've already
done it once so it's possible to do it again.  This isn't so
obvious when you are setting out to master something.  There
are any number of times when it feels hopeless.  But once
you've done it once you /know/ not only it can  be done but
that it can be done by you.

In evolutionary terms -- I shaped people are overly
specialized for a very specific ecological niche, which
means that they are vulnerable to environmental changes that
eliminate the conditions that they evolved to exploit.  The
more specialized you are the more vulnerable you are to change.

* Agile Manifesto
 - [[http://agilemanifesto.org/][Manifesto for Agile Software Development]]
 -[[http://agilemanifesto.org/principles.html][ Principles behind the Agile Manifesto]]

* Remote Manifesto

 - [[http://blog.ninlabs.com/2013/01/programmer-interrupted/][Programmer Interrupted]] | ninlabs research
 - [[https://hbr.org/2013/11/i-wasnt-hiding-from-you-boss-i-was-just-being-productive][I Wasn’t Hiding From You, Boss. I Was Just Being Productive.]]
 - [[https://techbeacon.com/remote-vs-office-software-teams-which-better][Remote vs. in-office software teams: Which is better?]] | TechBeacon

 - [[https://about.gitlab.com/2015/04/08/the-remote-manifesto/][The Remote Manifesto]] | GitLab
 - [[https://www.pandastrike.com/posts/20150304-agile][Flaws In Scrum And Agile]] | Panda Strike
 - [[bib:fried:2013remote][Remote: Office Not Required]] | Crown Business
 - [[bib:fried:2010rework][Rework]] | Crown Business
 - [[bib:burkun:2013pants][The year without pants: WordPress.com and the future of work]] | Jossey-Bass

* Working Backwards

  - [[http://www.allthingsdistributed.com/2006/11/working_backwards.html][Working Backwards - All Things Distributed]] | @Amazon
 
#+begin_quote
11.3 On Writing Manuals

I guess most manuals are written after-the-fact; documenting
a program that’s already there. This is not how this manual
is written. When implementing something, I write the manual
entry for that something straight away. I then see that it’s
difficult to explain the functionality, so I write how it’s
supposed to be, and then I change the
implementation. Writing the documentation and writing the
code go hand in hand.

This, of course, means that this manual has no, or little,
flow. It documents absolutely everything in Gnus, but often
not where you’re looking for it. It is a reference manual,
and not a guide to how to get started with Gnus.

That would be a totally different book, that should be
written using the reference manual as source material. It
would look quite different.

-- [[http://gnus.org/manual/gnus_135.html#On-Writing-Manuals][Gnus Manual: 11.3 On Writing Manuals]]
#+end_quote

* Workflow at Automattic

#+begin_quote
The general work flow at Automattic had seven steps:

  1. Pick a problem. A basic problem or idea for
     WordPress.com is chosen. It could be something like,
     “It's too hard to print blog posts,” or, “Let users
     share from WordPress to Facebook.” There are always
     hundreds of ideas and dozens of opinions about which
     ideas are important. There's no formal system for
     deciding, but many came from Mullenweg or as
     suggestions from the Happiness folks. After an idea is
     chosen, discussion begins on how it should work.
  2. Write a launch announcement and a support page. Most
     features are announced to the world after they go live
     on WordPress.com. But long before launch, a draft
     launch announcement is written. This sounds
     strange. How can you write an announcement for
     something that doesn't exist? The point is that if you
     can't imagine a compellingly simple explanation for
     customers, then you don't really understand why the
     feature is worth building. Writing the announcement
     first is a forcing function. You're forced to question
     if your idea is more exciting for you as the maker than
     it will be for your customer. If it is, rethink the
     idea or pick a different one.
  3. Consider what data will tell you it works. Since it's a
     live service, learn from what users are doing. The plan
     for a new feature must consider how its positive or
     negative impact on customers can be measured. For
     example, if the goal is to improve the number of
     comments bloggers get from readers, we'd track how many
     comments visitors write each day before and after the
     change.
  4. Get to work. Designers design. Programmers
     program. Periodically someone checks the launch
     announcement to remind everyone of the goal. As more is
     learned about what's possible, the announcement becomes
     more precise. Sometimes the feature pivots into
     something different and better.
  5. Launch. When the goal of the work has been met, the
     feature launches. It's often smaller in scope than the
     initial idea, but that's seen as a good thing. The code
     goes live, and there is much rejoicing.
  6. Learn. Data is captured instantly and discussed, often
     hourly, by the folks who did the work. Bugs are found
     and fixed. For larger features, several rounds of
     revisions are made to the design.
  7. Repeat.

-- The Year Without Pants | Chap 6.
#+end_quote


* Conformity Bias

  - [[https://en.wikipedia.org/wiki/Conformity][Conformity]] | Wikipedia
  - [[http://humancond.org/analysis/bias/conformity][Conformity Bias]]   | The Human Condition

Mary Poppendieck warns that conformity bias works against
some of the best ideas in a team (group) from emerging at
all.

#+begin_quote
Stop Voting

  1. Explore multiple ideas, including outliers
  2. Pursue a variety of ideas with champions and volunteers
  3. Gradually narrow the ideas to those that will work
  4. Maintain multiple options as long as possible

-- Mary Poppendieck | The Future of Software Engineering (presentation)
#+end_quote

* Scrum Values

 - Focus
 - Courage
 - Openness
 - Commitment
 - Respect

[[https://www.scrumalliance.org/why-scrum/core-scrum-values-roles][Scrum Values | Scrum Principles]] | Scrum Alliance


* The Waterfall

#+BEGIN_SRC dot :file img/waterfall.png :noweb yes :exports results
digraph h {
  <<dot-style>>

  rankdir=LR;
  splines=ortho;

  node      [fixedsize="true",height=".60",width="1.7",fillcolor="#56B4E9:0.5:#8EC9E9",gradientangle=90,fontcolor="#FFFFFF",shape=box]
  req       [label="requirements"]
  design    [label="design", pos="30,30"]
  imp       [label="implementation"]
  verify    [label="verification"]
  maint     [label="maintainence"]

 { rank=min; req;}
 { rank=sink; design;}
 { rank=min; imp; }
 { rank=sink; verify; }
 { rank=min; maint; }

  req    -> design;
  design -> imp ;
  imp    -> verify ;
  verify -> maint ;
}
#+END_SRC

#+RESULTS:
[[file:img/waterfall.png]]


** Normative References
:url: https://en.wikipedia.org/wiki/Waterfall_model






* The Chicken and the Pig

#+ATTR_ORG: :width 400px
[[./img/chicken-vs-pig.png]]

image source:
  - [[https://agile-setchu.org/2015/09/29/we-are-not-chickens-nor-are-we-pigs/][We are not chickens, nor are we pigs!]] | Agile at Scale

#+begin_quote
A Pig and a Chicken are walking down the road.

The Chicken says: “Hey Pig, I was thinking we should open a restaurant!”

Pig replies: “Hm, maybe; what would we call it?”

The Chicken responds: “How about ‘ham-n-eggs’?”

The Pig thinks for a moment and says: “No, thanks. I’d be committed,
but you’d only be involved!”[4]


[4] Just to be clear: a committed “pig” cares about the project’s
success more than he cares about anything else in his professional
life. There are a lot of other things in his personal life -- like his
family, for example -- that he usually cares more about. If that’s not
the case, it’s actually a problem with the team’s mindset, and it will
interfere with sustainable pace.

 -- p97

-- /Learning Agile/ Andrew Stellman & Jennifer Greene | 2015
#+end_quote

* Iterative vs Incremental

#+begin_quote
An iterative process is one that makes progress through successive
refinement. A development team takes a first cut at a system, knowing
it is incomplete or weak in some (perhaps many) areas. They then
iteratively refine those areas until the product is satisfactory. With
each iteration the software is improved through the addition of
greater detail.

An incremental process is one in which software is built and delivered
in pieces. Each piece, or increment, represents a complete subset of
functionality. The increment may be either small or large, perhaps
ranging from just a system’s login screen on the small end to a highly
flexible set of data management screens. Each increment is fully coded
and tested, and the common expectation is that the work of an
iteration will not need to be revisited.

-- Mike Cohn, /User Stories Applied: For Agile Software Development/
   Pearson Education, 2004.
#+end_quote


* Teams

Teams are made up of 2-8 people, with the average being closer to
4-6.  In a Scopic organization, a Team is called a =shop= and is a
formal designation of a holon with an identity of it's own.  For this
reason =shops= must be registered (self-registered) that will
establish a unique identity, a bramble, and ruleset that will be used
to manage it.  Teams are persistent, they can be created, but once
created they are part of the blockchain -- so they can be disbanded,
suspended, disolved, fractured, absorbed, merged or even abandoned,
but they can not be unmade.

Shops can be legal entities in their own right, shops can own
property, generate revenue, disperse funds, hire services, purchase
goods.  Shops, and the holons that own the shop are also accountable, 
legally, ethically and morally.

** Shop Sizes

There are limits on shop sizes -- they must conform to the =human
scale group pattern=

** 

For larger issues or issues that contain many different moving parts,
you'll be likely working in a team. This team will typically consist
of a =backend developer=, a =frontend developer=, a =UX designer= and a
=product manager=.

   - Teams have a shared responsibility to ship the issue in the
     planned release.
      - If the team suspects that they might not be
        able to ship something in time, the team should escalate /
        inform others as soon as possible. A good start is informing
        your lead.
      - It's generally preferable to ship a smaller
        iteration of an issue, than ship something a release later.
    - Consider starting a Slack channel for a new team, but remember
      to write all relevant information in the related issue(s). You
      don't want to have to read up on two threads, rather than only
      one, and Slack channels are not open to the greater GitLab
      community.





* Communication

** Chat (slack, irc etc)

In many respects, this article should be considered /the last word/ on
the subject -- it is so well thought out and written that it should be
required reading by all team members.

https://m.signalvnoise.com/is-group-chat-making-you-sweat-744659addf7d#.toilxdaah

* Working & Prioritizing
* Overflow

Tasks that aren't completed in a sprint and /overflow/ into the next
sprint.


* Keywords/Tags/Labels

In orgmode they are called tags, in the roundup tracker they are call
keywords, in GitLab they are called labels (though we don't use
GitLab), on Twitter they're called hashtags, but they all amount to
the same thing.

Tags (hey, I'm an emacs guy) are useful in many different contexts,
but they become a lot more useful when used consistently.  GitLab
breaks down tags into three groups; team, subject, and type.

Tags *MUST* be unique strings that are formally /defined/ in the
Chenla =topicspace=.
-- so that eventually, they will become machine understandable and can
be linked to their definition.

** Format

Tags *MUST* adhere to the =gracefully degrade= pattern and work both
in monochrome plain text displays as well as in graphical color
displays.


  | @place  | .team/org/proj | #subject/type |
  |---------+----------------+---------------|
  | @pnca   | .backend       | #A            |
  | @office | .frontend      | #bug          |
  | @home   | .infra         | #feature      |
  | @hk     | .kinto         | #backlog      |
  | @bulma  | .google        | #NEXT         |
  | @hard   | .moe           | #WORK         |

** Colors

Colors *SHOULD* always be used to convey semantic, contextual meaning.

#+ATTR_ORG: :width 300px
[[./img/bootstrap-colors.png]]

#+begin_src html
<span class="label">Default</span>
<span class="label label-success">Success</span>
<span class="label label-warning">Warning</span>
<span class="label label-important">Important</span>
<span class="label label-info">Info</span>
<span class="label label-default">Default</span>
#+end_src

** Place

Places can be either a physical location, an organization or a machine
name.

*** Place name

*** Machine name
  
** Team, Organizations, Projects
  
*** Teams

Should use 

#+begin_src css
/* Teams ---------------------------------*/
.tag span.Backend,
.tag span.Frontend,
.tag span.UI,
.tag span.Infra,
.tag span.Wetlab,
.tag span.Hardlab,
.tag span.Softlab { background: #5CB85C; }
#+end_src

When rendered in html.

 - Backend  :: Backend Team
 - Frontend :: Frontend Team
 - Infra    :: Infrastructure Team
 - UI       :: User Interface Team
 - Wetlab   :: Wet Lab Team
 - Softlab  :: Soft Lab Team
 - Hardlab  :: Hard Lab Team

*** Organization
 - chenla    ::
 - studyhall :: 
 - repozit   :: 

*** Projects
 - saltmine   :: 
 - rabbithole :: 

** Subject, Type, Priority

*** Workflow-Kanban
 - PLAN ::   (backlog)
 - NEXT :: 
 - WORK ::
 - DONE ::

*** Type
 - bug      :: 
 - feature  ::
 - request  :: 
 - wish     :: 
 - moonshot :: 

*** Priority 

Items that are marked with a priority are to be completed before other
items.  For this reason they are to be used sparingly -- but when they
are used they need to be taken seriously.  Priorities should be
discussed before being assigned.

 - #A: Critical. Must be given priority over any other issue except
   other #A level priority issues.  
 - #B: Must. Must be finished within the current sprint, milestone or
   release.
 - #C: Should. Takes priority over other non critical features, tasks
   or goals.

* Daily Scrum Meeting

*NOTE:* 2016-08-30 Obviously we have not started doing this, but I
came across the [[https://wiki.openmrs.org/display/RES/Daily+Scrum+Meeting][OpenMRS daily scrum meeting]] and thought that this is a
good fit with what I hope to do. The text in this section is using the
OpenMRS page as a starting point from which we'll slowly adapt.  I've
taken part in the weekly meetings held on IRC for One Laptop Per
Child, and they seem to work well.

The daily scrum meeting is a focused, 15-minute meeting for people
contributing to the core development of Chenla Saltmine to come
together and provide updates in the development process.

** What to Report in the Scrum:

Each developer answers the following questions:

  - What did you accomplish since the last meeting?
  - What do you plan to accomplish before the next meeting?
  - What are your blockers?
  - Discussion points - Items that are not blockers but need a group
    decision on after the daily scrum is completed

** Where to meet

The bi-weekly Chenla Forum takes place on the #chenla channel on
freenode -- the public is welcome to join this meeting where new
features and progress on the project as a whole will be discussed.

The daily team scrum meeting will be on irc.chenla.org and
mm.chenla.org in #scrum.

** Meeting schedule

The daily scrum meeting occurs at . 

Be sure to add the correct days and times into your calendars with a
10-minute reminder prior to each meeting, so you have time to prepare
your daily report.

  | UTC Meeting Times |
  |-------------------|
  | time time time    |
 
** Email Reminder

If you wish to recieve an email reminder of meetings -- sent about 1
hour before the meetings begin please email mailto:brad@chenla.org and
put in the subject something to the effect "remind me about scrum
meetings" or "remind me about forum meetings"

[[http://www.timeanddate.com/worldclock/converter.html][Time Zone Converter]]

** Making the meeting efficient

 - Be available at the proper start time.
 - Write your update 10 minutes before the daily scrum meeting.
    - Set your calendar reminder alarm for 10 minutes before the daily
      scrum meeting. When the alarm occurs, write up your work and
      prepare for the meeting.
    - The update should be a summary of the following:
      - What you worked on during the previous day
      - What you are currently working on today
      - What you will continue to work on after the meeting has
        finished
      - A list of any blockers, or items that are slowing down your
        progress
  - Stay focused on the IRC channel window.
      - If the daily scrum meeting were in person, we'd all be
        standing up. That's not easy to do on IRC, so it's important
        to pay attention.
      - The biggest delay in the meeting occurs when we focus on other
        windows on our computer. Either close or minimize those
        windows before the meeting.
  - Save all problem solving for the end of the meeting.
      - Updates, output, blockers, and change-of directions will go
        out quickly during the scrum from each individual. Afterwards,
        the group will go over problem-solving for the blockers that
        need to be resolved.
  - Be honest about blockers!
      - Blockers are issues that are getting in the way of doing other
        work, or challenging issues that are taking up a lot of time.
        The main reason for the daily scrum meeting is to share
        information about blockers and resolve them together.  If you
        have worked on the same problem for more than 1 hour (even if
        you think you know the solution!) state it as a blocker.


* Chenla Mailing Lists

Will dig these up -- clean out the spam and get things restarted
again.

* Chenla IRC & MatterMost

** IRC

Our irc server is http://irc.chenla.org

  - #chenla :: general discussion

** Mattermost

Our mattermost server will be at http://mm.chenla.org

** Informative References

 - http://wwww.irchelp.org/irchelp/irctutorial.html

* Chenla Pastebin

Will install [[http://sayakb.github.io/sticky-notes/pages/home/][Sticky Notes]] and the server will be: http://paste.chenla.org

* Remote Kanban Board

I am a big believer in the power of physical kanban boards -- I've
tried a number of electronic ones and they just don't have the emotive
power of a punch of colored pieces of paper taped to a board!

However, we are a distributed project -- so an idea I have at the
moment is to set up a webcam with a motion sensor of the kanban board
at the office at prekleap once an hour and keep a feed of the camera 
onm a web page.

We can then create a simple way of notifiying whoever is the person
(KanBan Keeper?) to move things around as needed.

The idea is that during scrum meetings, everyone should have a feed of
the board running next to their irc client so that we can make
collective updates during meetings.

It might turn out to be a dumb idea -- but I'd like to give it a try.

* Diagram definitions                                              :noexport:
** Global GraphViz styles

#+BEGIN_SRC dot :noweb-ref dot-style :exports none
  node[style="filled",fontname="Dejavu Sans",fontcolor="black",fontsize=14];
  edge[fontname="Dejavu Sans",fontsize=9];
#+END_SRC
